1.字符编码的基本概念
  1.1 码位（Code Point）
    码位也就是编码位置，是一个数值，一系列的码位组成了码空间，它们可以表示一个字符库（字符集合）。一个码位的数值对应一个字符，或者表示其他的内容，比如格式控制。ASCII码的码位从0x00到0x7F，包含了128个码位。扩展的ASCII码包含了0x00到0xFF的256个码位。Unicode包含了1,114,112个码位，范围从0x00到0x10FFFF,Unicode码空间划分了17个Unicode字符平面，1个基本平面和16个辅助平面。每个平面有65536个码位。

  1.2 抽象字符表（Abstract character repertoire），就是一个系统支持的全部抽象字符的集合。
  1.3 编码字符集（Coded Character Set）,将字符集中的每一个字符映射到一个坐标位置或者一个自然数。例如大写的拉丁字母'A','B'被赋予整数0x41,0x42。不同的编码字符集可以表示同样字符表。例如ISO-8859-1和IBM的代码页037和代码页500含盖同样的字符表但是将字符映射为不同的整数。
  1.4 编码空间（encoding space）就是包含所有字符的表的维度，可以用一对整数表示GB 2312的汉字编码空间是94 x 94。可以用一个数字表示，ISO-8859-1的编码空间是256。也可以用字符的存储单元尺寸来描述，例如：ISO-8859-1是一个8比特的编码空间。编码空间还可以用其子集来表述，如行、列、面（plane）等。编码空间中的一个位置（position）称为码位（code point）。一个字符所占用的码位称为码位值（code point value）。1个编码字符集就是把抽象字符映射为码位值。
  1.5 字符编码表(Character Encoding Form),也称为"storage format"，是将编码字符集的非负整数值（即抽象的码位）转换成有限比特长度的整型值（称为码元code units）的序列。这对于定长编码来说是个到自身的映射（null mapping,比如ASCII码就是用8bit的65表示字母A），但对于变长编码来说，该映射比较复杂，把一些码位映射到一个码元，把另外一些码位映射到由多个码元组成的序列。使用16比特长的存储单元保存数字信息，系统每个单元只能够直接表示从0到65,535的数值，但是如果使用多个16位单元就能够表示更大的整数。它可以把Unicode从0到140万的码空间范围的每个码位映射到单个或多个在0到65,5356范围内的码值。
  最简单的字符编码表就是单纯地选择足够大的单位，以保证编码字符集中的所有数值能够直接编码（一个码位对应一个码值）。这对于能够用使用八比特组来表示的编码字符集（如多数传统的非CJK的字符集编码）是合理的，对于能够使用十六比特来表示的编码字符集（如早期版本的Unicode）来说也足够合理。但是，随着编码字符集的大小增加（例如，现在的Unicode的字符集至少需要21位才能全部表示），这种直接表示法变得越来越没有效率，并且很难让现有计算机系统适应更大的码值。因此，许多使用新近版本Unicode的系统，或者将Unicode码位对应为可变长度的8位字节序列的UTF-8，或者将码位对应为可变长度的16位序列的UTF-16。
  1.6 术语字符编码（character encoding），字符映射（character map），字符集（character set）或者代码页，在历史上往往是同义概念，即字符表（repertoire）中的字符如何编码为码元的流（stream of code units）–通常每个字符对应单个码元
  1.7 码元（Code Unit，也称“代码单元”）是指一个已编码的文本中具有最短的比特组合的单元。对于UTF-8来说，码元是8比特长；对于UTF-16来说，码元是16比特长；对于UTF-32来说，码元是32比特长[1]。码值（Code Value）是过时的用法。
  1.8 代码页通常意味着面向字节的编码，但强调是一套用于不能语言的编码方案的集合.著名的如"Windows"代码页系列，"IBM"/"DOS"代码页系列.代码页是IBM称呼计算机的BIOS所支持的字符集编码。当时通用的操作系统都是命令行界面，这些操作系统直接使用BIOS提供的字符绘制功能来显示字符（或者是一组嵌入在显卡字符生成器中的字形）。这些BIOS代码页也被称为OEM代码页。图形操作系统使用自己的字符呈现引擎（rendering engine），可以支持多个不同的字符集编码，这类代码页被称作ANSI代码页。对于中日韩的多字节编码的代码页，OEM代码页与ASCII代码页相同，例如对于简体中文的OEM代码页与ASCII代码页就是GBK代码页。而对于单字节编码的代码页，如英语、俄语等，OEM代码页与ASCII代码页一般不同。一个用OEM代码页的字节流要在Windows上正确显示，就需要或者显式设定使用OEM代码页；或者要显式把OEM代码页的字节流转化为ASCII代码页的字符流，这需要使用Windows系统调用OemToChar()。Windows平台上的GUI程序使用ANSI代码页，而在控制台程序使用OEM代码页（以便向后兼容）。这意味着，如果在记事本程序（notepad.exe）打开一个8位字符集编码的文本文件，将使用ANSI代码页；如果在命令行中用type命令显示这个文本文件的内容，将使用OEM代码页。这两个代码页在前128个字符的编码是一样的，但后128个字符的编码可能不一致。在Windows的命令行窗口通过标记、复制操作把一部分文本内容复制到记事本程序中，实际上是把Unicode格式的内容保存在剪贴板，使得这种文本复制保持了字符编码的透明转换。对于Windows操作系统中的命令行窗口（Command Prompt），chcp命令在没有参数时，显示当前代码页；chcp命令带一个整数参数，则改变命令行窗口的当前代码页为参数所指定。把UTF-8编码文本直接写到控制台，必须先使用函数SetConsoleOutputCP(65001)，然后使用puts一族的函数来输出文本。把UTF-8编码文本写入UTF-8文件时，可以直接使用窄字符输出函数。在Windows API中，CP_ACP与CP_OEMCP分别表示当前系统的ANSI代码页与OEM代码页。对于CJK(多字节编码)的环境(泰文，日文，韩文，中文),CP_ACP与CP_OEMCP没有区别。对于非 CJK(单字节编码)的环境这两个代码页不同。 Windows的文件操作的API默认使用ASCII代码页(即CP_ACP)，设备的操作的函数使用OEM代码页(即CP_OEMCP)。读写console的函数是对console设备的操作，所以默认使用OEMCP。


  2020年4月3日22:41:57
  1. UTF-16与UCS-2的区别
    1.1 UTF-16和UCS-2都是Unicode的编码方式。Unicode的码空间从U+0000到U+10FFFF，共有1,112,064个码位(code point)可用来映射字符. Unicode的码空间可以划分为17个平面(plane)，每个平面包含216(65,536)个码位。每个平面的码位可表示为从U+xx0000到U+xxFFFF, 其中xx表示十六进制值从0016 到1016，共计17个平面。
    1.2 UCS-2 (2-byte Universal Character Set)是一种定长的编码方式，UCS-2仅仅简单的使用一个16位码元来表示码位，也就是说在0到0xFFFF的码位范围内，它和UTF-16基本一致。
    1.3 UTF-16 (16-bit Unicode Transformation Format)是UCS-2的拓展，它可以表示BMP以为的字符。UTF-16使用一个或者两个16位的码元来表示码位，这样就可以对0到0x10FFFF的码位进行编码。
总结，这个两种都是用来实现Unicode的，但是UCS-2只是固定的基本平面，UTF-16在基本平面从U+D800到U+DFFF的码位不对应于任何字符，作为一个可能的第二字节的前导字符。UTF-16有可能是4个字节，微软的Unicode的指的是UCS-2（LE、BE）。
https://www.cnblogs.com/malecrab/p/5300503.html

(1) 简单地说：Unicode属于字符集，不属于编码，UTF-8、UTF-16等是针对Unicode字符集的编码。

(2) UTF-8、UTF-16、UTF-32、UCS-2、UCS-4对比：

对比	         UTF-8	          UTF-16	       UTF-32	         UCS-2	        UCS-4
编码空间	     0-10FFFF	        0-10FFFF	     0-10FFFF	        0-FFFF	     0-7FFFFFFF
最少编码字节数	  1	                2	            4	              2	              4
最多编码字节数	  4	                4	            4	              2	              4
是否依赖字节序	  否	               是	          是	             是	            是

UTF-16解码
lead \ trail	DC00	DC01	   …   	DFFF
D800	        10000	10001	   …	  103FF
D801	        10400	10401	   …	  107FF
⋮	              ⋮	      ⋮	     ⋱  	⋮
DBFF	      10FC00	10FC01	 …	  10FFFF

Windows操作系统内核中的字符表示为UTF-16小尾序，可以正确处理、显示以4字节存储的字符。但是Windows API实际上仅能正确处理UCS-2字符，即仅以2字节存储的，码位小于U+FFFF的Unicode字符。其根源是Microsoft C++语言把 wchar_t 数据类型定义为16比特的unsigned short，这就与一个 wchar_t 型变量对应一个宽字符、可以存储一个Unicode字符的规定相矛盾。相反，Linux平台的GCC编译器规定一个 wchar_t 是4字节长度，可以存储一个UTF-32字符，宁可浪费了很大的存储空间。
